// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: news/news.proto

package newsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	News_GetFavorites_FullMethodName               = "/news.News/GetFavorites"
	News_HasFavorites_FullMethodName               = "/news.News/HasFavorites"
	News_ToggleFavorite_FullMethodName             = "/news.News/ToggleFavorite"
	News_MoveFavorite_FullMethodName               = "/news.News/MoveFavorite"
	News_CreateFavoriteFolder_FullMethodName       = "/news.News/CreateFavoriteFolder"
	News_UpdateFavoriteFolder_FullMethodName       = "/news.News/UpdateFavoriteFolder"
	News_GetFilters_FullMethodName                 = "/news.News/GetFilters"
	News_GetFiltersShort_FullMethodName            = "/news.News/GetFiltersShort"
	News_GetArticlesByFilter_FullMethodName        = "/news.News/GetArticlesByFilter"
	News_CreateFilter_FullMethodName               = "/news.News/CreateFilter"
	News_CreateFilterFromCategories_FullMethodName = "/news.News/CreateFilterFromCategories"
	News_UpdateFilter_FullMethodName               = "/news.News/UpdateFilter"
	News_UpdateFilterSources_FullMethodName        = "/news.News/UpdateFilterSources"
	News_RemoveFilter_FullMethodName               = "/news.News/RemoveFilter"
)

// NewsClient is the client API for News service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsClient interface {
	GetFavorites(ctx context.Context, in *GetFavoritesParams, opts ...grpc.CallOption) (*GetFavoritesResponse, error)
	HasFavorites(ctx context.Context, in *HasFavoritesParams, opts ...grpc.CallOption) (*HasFavoritesResponse, error)
	ToggleFavorite(ctx context.Context, in *ToggleFavoriteParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveFavorite(ctx context.Context, in *MoveFavoriteParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateFavoriteFolder(ctx context.Context, in *CreateFavoriteFolderParams, opts ...grpc.CallOption) (*FavoriteFolder, error)
	UpdateFavoriteFolder(ctx context.Context, in *UpdateFavoriteFolderParams, opts ...grpc.CallOption) (*FavoriteFolder, error)
	GetFilters(ctx context.Context, in *GetFiltersParams, opts ...grpc.CallOption) (*GetFiltersResponse, error)
	GetFiltersShort(ctx context.Context, in *GetFiltersParams, opts ...grpc.CallOption) (*GetFiltersShortResponse, error)
	GetArticlesByFilter(ctx context.Context, in *GetArticlesByFilterParams, opts ...grpc.CallOption) (*GetArticlesShortResponse, error)
	CreateFilter(ctx context.Context, in *CreateFilterParams, opts ...grpc.CallOption) (*Filter, error)
	CreateFilterFromCategories(ctx context.Context, in *CreateFilterFromCategoriesParams, opts ...grpc.CallOption) (*Filter, error)
	UpdateFilter(ctx context.Context, in *UpdateFilterParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFilterSources(ctx context.Context, in *UpdateFilterSourcesParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFilter(ctx context.Context, in *RemoveFilterParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type newsClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsClient(cc grpc.ClientConnInterface) NewsClient {
	return &newsClient{cc}
}

func (c *newsClient) GetFavorites(ctx context.Context, in *GetFavoritesParams, opts ...grpc.CallOption) (*GetFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoritesResponse)
	err := c.cc.Invoke(ctx, News_GetFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) HasFavorites(ctx context.Context, in *HasFavoritesParams, opts ...grpc.CallOption) (*HasFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasFavoritesResponse)
	err := c.cc.Invoke(ctx, News_HasFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ToggleFavorite(ctx context.Context, in *ToggleFavoriteParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, News_ToggleFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) MoveFavorite(ctx context.Context, in *MoveFavoriteParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, News_MoveFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) CreateFavoriteFolder(ctx context.Context, in *CreateFavoriteFolderParams, opts ...grpc.CallOption) (*FavoriteFolder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteFolder)
	err := c.cc.Invoke(ctx, News_CreateFavoriteFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) UpdateFavoriteFolder(ctx context.Context, in *UpdateFavoriteFolderParams, opts ...grpc.CallOption) (*FavoriteFolder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteFolder)
	err := c.cc.Invoke(ctx, News_UpdateFavoriteFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetFilters(ctx context.Context, in *GetFiltersParams, opts ...grpc.CallOption) (*GetFiltersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFiltersResponse)
	err := c.cc.Invoke(ctx, News_GetFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetFiltersShort(ctx context.Context, in *GetFiltersParams, opts ...grpc.CallOption) (*GetFiltersShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFiltersShortResponse)
	err := c.cc.Invoke(ctx, News_GetFiltersShort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetArticlesByFilter(ctx context.Context, in *GetArticlesByFilterParams, opts ...grpc.CallOption) (*GetArticlesShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticlesShortResponse)
	err := c.cc.Invoke(ctx, News_GetArticlesByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) CreateFilter(ctx context.Context, in *CreateFilterParams, opts ...grpc.CallOption) (*Filter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Filter)
	err := c.cc.Invoke(ctx, News_CreateFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) CreateFilterFromCategories(ctx context.Context, in *CreateFilterFromCategoriesParams, opts ...grpc.CallOption) (*Filter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Filter)
	err := c.cc.Invoke(ctx, News_CreateFilterFromCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) UpdateFilter(ctx context.Context, in *UpdateFilterParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, News_UpdateFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) UpdateFilterSources(ctx context.Context, in *UpdateFilterSourcesParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, News_UpdateFilterSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) RemoveFilter(ctx context.Context, in *RemoveFilterParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, News_RemoveFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsServer is the server API for News service.
// All implementations must embed UnimplementedNewsServer
// for forward compatibility.
type NewsServer interface {
	GetFavorites(context.Context, *GetFavoritesParams) (*GetFavoritesResponse, error)
	HasFavorites(context.Context, *HasFavoritesParams) (*HasFavoritesResponse, error)
	ToggleFavorite(context.Context, *ToggleFavoriteParams) (*emptypb.Empty, error)
	MoveFavorite(context.Context, *MoveFavoriteParams) (*emptypb.Empty, error)
	CreateFavoriteFolder(context.Context, *CreateFavoriteFolderParams) (*FavoriteFolder, error)
	UpdateFavoriteFolder(context.Context, *UpdateFavoriteFolderParams) (*FavoriteFolder, error)
	GetFilters(context.Context, *GetFiltersParams) (*GetFiltersResponse, error)
	GetFiltersShort(context.Context, *GetFiltersParams) (*GetFiltersShortResponse, error)
	GetArticlesByFilter(context.Context, *GetArticlesByFilterParams) (*GetArticlesShortResponse, error)
	CreateFilter(context.Context, *CreateFilterParams) (*Filter, error)
	CreateFilterFromCategories(context.Context, *CreateFilterFromCategoriesParams) (*Filter, error)
	UpdateFilter(context.Context, *UpdateFilterParams) (*emptypb.Empty, error)
	UpdateFilterSources(context.Context, *UpdateFilterSourcesParams) (*emptypb.Empty, error)
	RemoveFilter(context.Context, *RemoveFilterParams) (*emptypb.Empty, error)
	mustEmbedUnimplementedNewsServer()
}

// UnimplementedNewsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNewsServer struct{}

func (UnimplementedNewsServer) GetFavorites(context.Context, *GetFavoritesParams) (*GetFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedNewsServer) HasFavorites(context.Context, *HasFavoritesParams) (*HasFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasFavorites not implemented")
}
func (UnimplementedNewsServer) ToggleFavorite(context.Context, *ToggleFavoriteParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleFavorite not implemented")
}
func (UnimplementedNewsServer) MoveFavorite(context.Context, *MoveFavoriteParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFavorite not implemented")
}
func (UnimplementedNewsServer) CreateFavoriteFolder(context.Context, *CreateFavoriteFolderParams) (*FavoriteFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFavoriteFolder not implemented")
}
func (UnimplementedNewsServer) UpdateFavoriteFolder(context.Context, *UpdateFavoriteFolderParams) (*FavoriteFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFavoriteFolder not implemented")
}
func (UnimplementedNewsServer) GetFilters(context.Context, *GetFiltersParams) (*GetFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilters not implemented")
}
func (UnimplementedNewsServer) GetFiltersShort(context.Context, *GetFiltersParams) (*GetFiltersShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiltersShort not implemented")
}
func (UnimplementedNewsServer) GetArticlesByFilter(context.Context, *GetArticlesByFilterParams) (*GetArticlesShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticlesByFilter not implemented")
}
func (UnimplementedNewsServer) CreateFilter(context.Context, *CreateFilterParams) (*Filter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilter not implemented")
}
func (UnimplementedNewsServer) CreateFilterFromCategories(context.Context, *CreateFilterFromCategoriesParams) (*Filter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilterFromCategories not implemented")
}
func (UnimplementedNewsServer) UpdateFilter(context.Context, *UpdateFilterParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilter not implemented")
}
func (UnimplementedNewsServer) UpdateFilterSources(context.Context, *UpdateFilterSourcesParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilterSources not implemented")
}
func (UnimplementedNewsServer) RemoveFilter(context.Context, *RemoveFilterParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilter not implemented")
}
func (UnimplementedNewsServer) mustEmbedUnimplementedNewsServer() {}
func (UnimplementedNewsServer) testEmbeddedByValue()              {}

// UnsafeNewsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsServer will
// result in compilation errors.
type UnsafeNewsServer interface {
	mustEmbedUnimplementedNewsServer()
}

func RegisterNewsServer(s grpc.ServiceRegistrar, srv NewsServer) {
	// If the following call pancis, it indicates UnimplementedNewsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&News_ServiceDesc, srv)
}

func _News_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_GetFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetFavorites(ctx, req.(*GetFavoritesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_HasFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasFavoritesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).HasFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_HasFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).HasFavorites(ctx, req.(*HasFavoritesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ToggleFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFavoriteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ToggleFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_ToggleFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ToggleFavorite(ctx, req.(*ToggleFavoriteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_MoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFavoriteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).MoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_MoveFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).MoveFavorite(ctx, req.(*MoveFavoriteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_CreateFavoriteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFavoriteFolderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).CreateFavoriteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_CreateFavoriteFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).CreateFavoriteFolder(ctx, req.(*CreateFavoriteFolderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_UpdateFavoriteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFavoriteFolderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).UpdateFavoriteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_UpdateFavoriteFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).UpdateFavoriteFolder(ctx, req.(*UpdateFavoriteFolderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiltersParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_GetFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetFilters(ctx, req.(*GetFiltersParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetFiltersShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiltersParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetFiltersShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_GetFiltersShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetFiltersShort(ctx, req.(*GetFiltersParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetArticlesByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticlesByFilterParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetArticlesByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_GetArticlesByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetArticlesByFilter(ctx, req.(*GetArticlesByFilterParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_CreateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilterParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).CreateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_CreateFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).CreateFilter(ctx, req.(*CreateFilterParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_CreateFilterFromCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilterFromCategoriesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).CreateFilterFromCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_CreateFilterFromCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).CreateFilterFromCategories(ctx, req.(*CreateFilterFromCategoriesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_UpdateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilterParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).UpdateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_UpdateFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).UpdateFilter(ctx, req.(*UpdateFilterParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_UpdateFilterSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilterSourcesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).UpdateFilterSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_UpdateFilterSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).UpdateFilterSources(ctx, req.(*UpdateFilterSourcesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_RemoveFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFilterParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).RemoveFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: News_RemoveFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).RemoveFilter(ctx, req.(*RemoveFilterParams))
	}
	return interceptor(ctx, in, info, handler)
}

// News_ServiceDesc is the grpc.ServiceDesc for News service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var News_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "news.News",
	HandlerType: (*NewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFavorites",
			Handler:    _News_GetFavorites_Handler,
		},
		{
			MethodName: "HasFavorites",
			Handler:    _News_HasFavorites_Handler,
		},
		{
			MethodName: "ToggleFavorite",
			Handler:    _News_ToggleFavorite_Handler,
		},
		{
			MethodName: "MoveFavorite",
			Handler:    _News_MoveFavorite_Handler,
		},
		{
			MethodName: "CreateFavoriteFolder",
			Handler:    _News_CreateFavoriteFolder_Handler,
		},
		{
			MethodName: "UpdateFavoriteFolder",
			Handler:    _News_UpdateFavoriteFolder_Handler,
		},
		{
			MethodName: "GetFilters",
			Handler:    _News_GetFilters_Handler,
		},
		{
			MethodName: "GetFiltersShort",
			Handler:    _News_GetFiltersShort_Handler,
		},
		{
			MethodName: "GetArticlesByFilter",
			Handler:    _News_GetArticlesByFilter_Handler,
		},
		{
			MethodName: "CreateFilter",
			Handler:    _News_CreateFilter_Handler,
		},
		{
			MethodName: "CreateFilterFromCategories",
			Handler:    _News_CreateFilterFromCategories_Handler,
		},
		{
			MethodName: "UpdateFilter",
			Handler:    _News_UpdateFilter_Handler,
		},
		{
			MethodName: "UpdateFilterSources",
			Handler:    _News_UpdateFilterSources_Handler,
		},
		{
			MethodName: "RemoveFilter",
			Handler:    _News_RemoveFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news/news.proto",
}
