// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: news/news.proto

package newsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArticleProcessingState int32

const (
	ArticleProcessingState_ARTICLE_PROCESSING_STATE_UNSPECIFIED ArticleProcessingState = 0
	ArticleProcessingState_RECEIVED                             ArticleProcessingState = 1
	ArticleProcessingState_NORMALIZED                           ArticleProcessingState = 2
	ArticleProcessingState_CATEGORIZED                          ArticleProcessingState = 3
	ArticleProcessingState_INDEXED                              ArticleProcessingState = 4
	ArticleProcessingState_IMAGE_UPLOADED                       ArticleProcessingState = 5
	ArticleProcessingState_ERROR                                ArticleProcessingState = 6
)

// Enum value maps for ArticleProcessingState.
var (
	ArticleProcessingState_name = map[int32]string{
		0: "ARTICLE_PROCESSING_STATE_UNSPECIFIED",
		1: "RECEIVED",
		2: "NORMALIZED",
		3: "CATEGORIZED",
		4: "INDEXED",
		5: "IMAGE_UPLOADED",
		6: "ERROR",
	}
	ArticleProcessingState_value = map[string]int32{
		"ARTICLE_PROCESSING_STATE_UNSPECIFIED": 0,
		"RECEIVED":                             1,
		"NORMALIZED":                           2,
		"CATEGORIZED":                          3,
		"INDEXED":                              4,
		"IMAGE_UPLOADED":                       5,
		"ERROR":                                6,
	}
)

func (x ArticleProcessingState) Enum() *ArticleProcessingState {
	p := new(ArticleProcessingState)
	*p = x
	return p
}

func (x ArticleProcessingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArticleProcessingState) Descriptor() protoreflect.EnumDescriptor {
	return file_news_news_proto_enumTypes[0].Descriptor()
}

func (ArticleProcessingState) Type() protoreflect.EnumType {
	return &file_news_news_proto_enumTypes[0]
}

func (x ArticleProcessingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArticleProcessingState.Descriptor instead.
func (ArticleProcessingState) EnumDescriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{0}
}

type ArticleCountAction int32

const (
	ArticleCountAction_ACTION_UNSPECIFIED ArticleCountAction = 0
	ArticleCountAction_VIEWS              ArticleCountAction = 1
	ArticleCountAction_LIKE               ArticleCountAction = 2
	ArticleCountAction_UNLIKE             ArticleCountAction = 3
	ArticleCountAction_SHARE              ArticleCountAction = 4
)

// Enum value maps for ArticleCountAction.
var (
	ArticleCountAction_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "VIEWS",
		2: "LIKE",
		3: "UNLIKE",
		4: "SHARE",
	}
	ArticleCountAction_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"VIEWS":              1,
		"LIKE":               2,
		"UNLIKE":             3,
		"SHARE":              4,
	}
)

func (x ArticleCountAction) Enum() *ArticleCountAction {
	p := new(ArticleCountAction)
	*p = x
	return p
}

func (x ArticleCountAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArticleCountAction) Descriptor() protoreflect.EnumDescriptor {
	return file_news_news_proto_enumTypes[1].Descriptor()
}

func (ArticleCountAction) Type() protoreflect.EnumType {
	return &file_news_news_proto_enumTypes[1]
}

func (x ArticleCountAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArticleCountAction.Descriptor instead.
func (ArticleCountAction) EnumDescriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{1}
}

type SourceType int32

const (
	SourceType_SOURCE_TYPE_UNSPECIFIED SourceType = 0
	SourceType_WEB                     SourceType = 1
	SourceType_XCOM                    SourceType = 2
	SourceType_TELEGRAM                SourceType = 3
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNSPECIFIED",
		1: "WEB",
		2: "XCOM",
		3: "TELEGRAM",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNSPECIFIED": 0,
		"WEB":                     1,
		"XCOM":                    2,
		"TELEGRAM":                3,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_news_news_proto_enumTypes[2].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_news_news_proto_enumTypes[2]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{2}
}

type RawSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Type          SourceType             `protobuf:"varint,2,opt,name=type,proto3,enum=news.SourceType" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Slug          string                 `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Url           string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Lang          int32                  `protobuf:"varint,6,opt,name=lang,proto3" json:"lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawSource) Reset() {
	*x = RawSource{}
	mi := &file_news_news_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawSource) ProtoMessage() {}

func (x *RawSource) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawSource.ProtoReflect.Descriptor instead.
func (*RawSource) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{0}
}

func (x *RawSource) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *RawSource) GetType() SourceType {
	if x != nil {
		return x.Type
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *RawSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RawSource) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *RawSource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RawSource) GetLang() int32 {
	if x != nil {
		return x.Lang
	}
	return 0
}

type NormalizedSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Type          SourceType             `protobuf:"varint,2,opt,name=type,proto3,enum=news.SourceType" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Slug          string                 `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Lang          int32                  `protobuf:"varint,5,opt,name=lang,proto3" json:"lang,omitempty"`
	State         int32                  `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NormalizedSource) Reset() {
	*x = NormalizedSource{}
	mi := &file_news_news_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NormalizedSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizedSource) ProtoMessage() {}

func (x *NormalizedSource) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizedSource.ProtoReflect.Descriptor instead.
func (*NormalizedSource) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{1}
}

func (x *NormalizedSource) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *NormalizedSource) GetType() SourceType {
	if x != nil {
		return x.Type
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *NormalizedSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NormalizedSource) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *NormalizedSource) GetLang() int32 {
	if x != nil {
		return x.Lang
	}
	return 0
}

func (x *NormalizedSource) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type RawArticle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	ImageUrl      string                 `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	SourceUuid    []byte                 `protobuf:"bytes,6,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	Lang          int32                  `protobuf:"varint,7,opt,name=lang,proto3" json:"lang,omitempty"`
	PublishedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawArticle) Reset() {
	*x = RawArticle{}
	mi := &file_news_news_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawArticle) ProtoMessage() {}

func (x *RawArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawArticle.ProtoReflect.Descriptor instead.
func (*RawArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{2}
}

func (x *RawArticle) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *RawArticle) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RawArticle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RawArticle) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RawArticle) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *RawArticle) GetSourceUuid() []byte {
	if x != nil {
		return x.SourceUuid
	}
	return nil
}

func (x *RawArticle) GetLang() int32 {
	if x != nil {
		return x.Lang
	}
	return 0
}

func (x *RawArticle) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type CleanArticle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SourceUuid    []byte                 `protobuf:"bytes,2,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Lang          int32                  `protobuf:"varint,4,opt,name=lang,proto3" json:"lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanArticle) Reset() {
	*x = CleanArticle{}
	mi := &file_news_news_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanArticle) ProtoMessage() {}

func (x *CleanArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanArticle.ProtoReflect.Descriptor instead.
func (*CleanArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{3}
}

func (x *CleanArticle) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *CleanArticle) GetSourceUuid() []byte {
	if x != nil {
		return x.SourceUuid
	}
	return nil
}

func (x *CleanArticle) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CleanArticle) GetLang() int32 {
	if x != nil {
		return x.Lang
	}
	return 0
}

type ApiInArticle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	ImageUuid     []byte                 `protobuf:"bytes,5,opt,name=image_uuid,json=imageUuid,proto3" json:"image_uuid,omitempty"`
	SourceUuid    []byte                 `protobuf:"bytes,6,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	Lang          int32                  `protobuf:"varint,7,opt,name=lang,proto3" json:"lang,omitempty"`
	PublishedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiInArticle) Reset() {
	*x = ApiInArticle{}
	mi := &file_news_news_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiInArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiInArticle) ProtoMessage() {}

func (x *ApiInArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiInArticle.ProtoReflect.Descriptor instead.
func (*ApiInArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{4}
}

func (x *ApiInArticle) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *ApiInArticle) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ApiInArticle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ApiInArticle) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ApiInArticle) GetImageUuid() []byte {
	if x != nil {
		return x.ImageUuid
	}
	return nil
}

func (x *ApiInArticle) GetSourceUuid() []byte {
	if x != nil {
		return x.SourceUuid
	}
	return nil
}

func (x *ApiInArticle) GetLang() int32 {
	if x != nil {
		return x.Lang
	}
	return 0
}

func (x *ApiInArticle) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type ArticleI10N struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Lang          int32                  `protobuf:"varint,2,opt,name=lang,proto3" json:"lang,omitempty"`
	Clean         string                 `protobuf:"bytes,3,opt,name=clean,proto3" json:"clean,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleI10N) Reset() {
	*x = ArticleI10N{}
	mi := &file_news_news_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleI10N) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleI10N) ProtoMessage() {}

func (x *ArticleI10N) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleI10N.ProtoReflect.Descriptor instead.
func (*ArticleI10N) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{5}
}

func (x *ArticleI10N) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *ArticleI10N) GetLang() int32 {
	if x != nil {
		return x.Lang
	}
	return 0
}

func (x *ArticleI10N) GetClean() string {
	if x != nil {
		return x.Clean
	}
	return ""
}

func (x *ArticleI10N) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleI10N) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Article struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *ArticleMeta           `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data          *ArticleData           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Counts        *ArticleCounts         `protobuf:"bytes,3,opt,name=counts,proto3" json:"counts,omitempty"`
	Flags         *ArticleFlags          `protobuf:"bytes,4,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Article) Reset() {
	*x = Article{}
	mi := &file_news_news_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{6}
}

func (x *Article) GetMeta() *ArticleMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Article) GetData() *ArticleData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Article) GetCounts() *ArticleCounts {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *Article) GetFlags() *ArticleFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

type ArticleShort struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Meta          *ArticleMeta           `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	Data          *ArticleDataShort      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Counts        *ArticleCounts         `protobuf:"bytes,4,opt,name=counts,proto3" json:"counts,omitempty"`
	Flags         *ArticleFlags          `protobuf:"bytes,5,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleShort) Reset() {
	*x = ArticleShort{}
	mi := &file_news_news_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleShort) ProtoMessage() {}

func (x *ArticleShort) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleShort.ProtoReflect.Descriptor instead.
func (*ArticleShort) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{7}
}

func (x *ArticleShort) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *ArticleShort) GetMeta() *ArticleMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ArticleShort) GetData() *ArticleDataShort {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ArticleShort) GetCounts() *ArticleCounts {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *ArticleShort) GetFlags() *ArticleFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

type ArticleMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceUuid    []byte                 `protobuf:"bytes,2,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	ImageUuid     []byte                 `protobuf:"bytes,3,opt,name=image_uuid,json=imageUuid,proto3,oneof" json:"image_uuid,omitempty"`
	Categories    []int32                `protobuf:"varint,4,rep,packed,name=categories,proto3" json:"categories,omitempty"`
	Url           string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	PublishedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleMeta) Reset() {
	*x = ArticleMeta{}
	mi := &file_news_news_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleMeta) ProtoMessage() {}

func (x *ArticleMeta) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleMeta.ProtoReflect.Descriptor instead.
func (*ArticleMeta) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{8}
}

func (x *ArticleMeta) GetSourceUuid() []byte {
	if x != nil {
		return x.SourceUuid
	}
	return nil
}

func (x *ArticleMeta) GetImageUuid() []byte {
	if x != nil {
		return x.ImageUuid
	}
	return nil
}

func (x *ArticleMeta) GetCategories() []int32 {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *ArticleMeta) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ArticleMeta) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type ArticleData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleData) Reset() {
	*x = ArticleData{}
	mi := &file_news_news_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleData) ProtoMessage() {}

func (x *ArticleData) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleData.ProtoReflect.Descriptor instead.
func (*ArticleData) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{9}
}

func (x *ArticleData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ArticleDataShort struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleDataShort) Reset() {
	*x = ArticleDataShort{}
	mi := &file_news_news_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleDataShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleDataShort) ProtoMessage() {}

func (x *ArticleDataShort) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleDataShort.ProtoReflect.Descriptor instead.
func (*ArticleDataShort) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{10}
}

func (x *ArticleDataShort) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ArticleCounts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Views         int32                  `protobuf:"varint,1,opt,name=views,proto3" json:"views,omitempty"`
	Likes         int32                  `protobuf:"varint,2,opt,name=likes,proto3" json:"likes,omitempty"`
	Shares        int32                  `protobuf:"varint,3,opt,name=shares,proto3" json:"shares,omitempty"`
	Comments      int32                  `protobuf:"varint,4,opt,name=comments,proto3" json:"comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleCounts) Reset() {
	*x = ArticleCounts{}
	mi := &file_news_news_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleCounts) ProtoMessage() {}

func (x *ArticleCounts) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleCounts.ProtoReflect.Descriptor instead.
func (*ArticleCounts) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{11}
}

func (x *ArticleCounts) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *ArticleCounts) GetLikes() int32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *ArticleCounts) GetShares() int32 {
	if x != nil {
		return x.Shares
	}
	return 0
}

func (x *ArticleCounts) GetComments() int32 {
	if x != nil {
		return x.Comments
	}
	return 0
}

type ArticleFlags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsFavorite    bool                   `protobuf:"varint,1,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleFlags) Reset() {
	*x = ArticleFlags{}
	mi := &file_news_news_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleFlags) ProtoMessage() {}

func (x *ArticleFlags) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleFlags.ProtoReflect.Descriptor instead.
func (*ArticleFlags) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{12}
}

func (x *ArticleFlags) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type ArticleContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArticleContent) Reset() {
	*x = ArticleContent{}
	mi := &file_news_news_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArticleContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleContent) ProtoMessage() {}

func (x *ArticleContent) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleContent.ProtoReflect.Descriptor instead.
func (*ArticleContent) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{13}
}

func (x *ArticleContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Source struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Type          SourceType             `protobuf:"varint,2,opt,name=type,proto3,enum=news.SourceType" json:"type,omitempty"`
	Name          int32                  `protobuf:"varint,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon          []byte                 `protobuf:"bytes,4,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_news_news_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{14}
}

func (x *Source) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Source) GetType() SourceType {
	if x != nil {
		return x.Type
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (x *Source) GetName() int32 {
	if x != nil {
		return x.Name
	}
	return 0
}

func (x *Source) GetIcon() []byte {
	if x != nil {
		return x.Icon
	}
	return nil
}

type Category struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *CategoryMeta          `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data          *CategoryData          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Category) Reset() {
	*x = Category{}
	mi := &file_news_news_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{15}
}

func (x *Category) GetMeta() *CategoryMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Category) GetData() *CategoryData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CategoryMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ParentId      []byte                 `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryMeta) Reset() {
	*x = CategoryMeta{}
	mi := &file_news_news_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryMeta) ProtoMessage() {}

func (x *CategoryMeta) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryMeta.ProtoReflect.Descriptor instead.
func (*CategoryMeta) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{16}
}

func (x *CategoryMeta) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *CategoryMeta) GetParentId() []byte {
	if x != nil {
		return x.ParentId
	}
	return nil
}

type CategoryData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryData) Reset() {
	*x = CategoryData{}
	mi := &file_news_news_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryData) ProtoMessage() {}

func (x *CategoryData) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryData.ProtoReflect.Descriptor instead.
func (*CategoryData) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{17}
}

func (x *CategoryData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetCategories struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          int32                  `protobuf:"varint,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ParentId      []byte                 `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Categories    []*Category            `protobuf:"bytes,4,rep,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCategories) Reset() {
	*x = GetCategories{}
	mi := &file_news_news_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategories) ProtoMessage() {}

func (x *GetCategories) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategories.ProtoReflect.Descriptor instead.
func (*GetCategories) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{18}
}

func (x *GetCategories) GetLang() int32 {
	if x != nil {
		return x.Lang
	}
	return 0
}

func (x *GetCategories) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCategories) GetParentId() []byte {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *GetCategories) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetCategoryI10N struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          int32                  `protobuf:"varint,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Data          *CategoryData          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCategoryI10N) Reset() {
	*x = GetCategoryI10N{}
	mi := &file_news_news_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoryI10N) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryI10N) ProtoMessage() {}

func (x *GetCategoryI10N) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryI10N.ProtoReflect.Descriptor instead.
func (*GetCategoryI10N) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{19}
}

func (x *GetCategoryI10N) GetLang() int32 {
	if x != nil {
		return x.Lang
	}
	return 0
}

func (x *GetCategoryI10N) GetData() *CategoryData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ActionArticle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserUuid      []byte                 `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	ArticleUuid   []byte                 `protobuf:"bytes,2,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionArticle) Reset() {
	*x = ActionArticle{}
	mi := &file_news_news_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionArticle) ProtoMessage() {}

func (x *ActionArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionArticle.ProtoReflect.Descriptor instead.
func (*ActionArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{20}
}

func (x *ActionArticle) GetUserUuid() []byte {
	if x != nil {
		return x.UserUuid
	}
	return nil
}

func (x *ActionArticle) GetArticleUuid() []byte {
	if x != nil {
		return x.ArticleUuid
	}
	return nil
}

type UpsertImageUUID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArticleUuid   []byte                 `protobuf:"bytes,1,opt,name=article_uuid,json=articleUuid,proto3" json:"article_uuid,omitempty"`
	ImageUuid     []byte                 `protobuf:"bytes,2,opt,name=image_uuid,json=imageUuid,proto3" json:"image_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertImageUUID) Reset() {
	*x = UpsertImageUUID{}
	mi := &file_news_news_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertImageUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertImageUUID) ProtoMessage() {}

func (x *UpsertImageUUID) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertImageUUID.ProtoReflect.Descriptor instead.
func (*UpsertImageUUID) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{21}
}

func (x *UpsertImageUUID) GetArticleUuid() []byte {
	if x != nil {
		return x.ArticleUuid
	}
	return nil
}

func (x *UpsertImageUUID) GetImageUuid() []byte {
	if x != nil {
		return x.ImageUuid
	}
	return nil
}

var File_news_news_proto protoreflect.FileDescriptor

var file_news_news_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x77,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x9e,
	0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xf3, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x77, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0x71, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0xf7, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x69,
	0x49, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x7b, 0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x31, 0x30,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0xae, 0x01, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x06,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0xd2, 0x01, 0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x6f, 0x0a,
	0x0d, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2f,
	0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22,
	0x2a, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x52, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x31, 0x30, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x26, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x0f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x2a, 0x9d, 0x01, 0x0a, 0x16,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x58, 0x0a, 0x12, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x45,
	0x57, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x4e, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x10, 0x04, 0x2a, 0x4a, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x58, 0x43, 0x4f,
	0x4d, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x4c, 0x45, 0x47, 0x52, 0x41, 0x4d, 0x10,
	0x03, 0x42, 0x11, 0x5a, 0x0f, 0x78, 0x33, 0x61, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x3b, 0x6e, 0x65,
	0x77, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_news_news_proto_rawDescOnce sync.Once
	file_news_news_proto_rawDescData []byte
)

func file_news_news_proto_rawDescGZIP() []byte {
	file_news_news_proto_rawDescOnce.Do(func() {
		file_news_news_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_news_news_proto_rawDesc), len(file_news_news_proto_rawDesc)))
	})
	return file_news_news_proto_rawDescData
}

var file_news_news_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_news_news_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_news_news_proto_goTypes = []any{
	(ArticleProcessingState)(0),   // 0: news.ArticleProcessingState
	(ArticleCountAction)(0),       // 1: news.ArticleCountAction
	(SourceType)(0),               // 2: news.SourceType
	(*RawSource)(nil),             // 3: news.RawSource
	(*NormalizedSource)(nil),      // 4: news.NormalizedSource
	(*RawArticle)(nil),            // 5: news.RawArticle
	(*CleanArticle)(nil),          // 6: news.CleanArticle
	(*ApiInArticle)(nil),          // 7: news.ApiInArticle
	(*ArticleI10N)(nil),           // 8: news.ArticleI10n
	(*Article)(nil),               // 9: news.Article
	(*ArticleShort)(nil),          // 10: news.ArticleShort
	(*ArticleMeta)(nil),           // 11: news.ArticleMeta
	(*ArticleData)(nil),           // 12: news.ArticleData
	(*ArticleDataShort)(nil),      // 13: news.ArticleDataShort
	(*ArticleCounts)(nil),         // 14: news.ArticleCounts
	(*ArticleFlags)(nil),          // 15: news.ArticleFlags
	(*ArticleContent)(nil),        // 16: news.ArticleContent
	(*Source)(nil),                // 17: news.Source
	(*Category)(nil),              // 18: news.Category
	(*CategoryMeta)(nil),          // 19: news.CategoryMeta
	(*CategoryData)(nil),          // 20: news.CategoryData
	(*GetCategories)(nil),         // 21: news.GetCategories
	(*GetCategoryI10N)(nil),       // 22: news.GetCategoryI10n
	(*ActionArticle)(nil),         // 23: news.ActionArticle
	(*UpsertImageUUID)(nil),       // 24: news.UpsertImageUUID
	(*timestamppb.Timestamp)(nil), // 25: google.protobuf.Timestamp
}
var file_news_news_proto_depIdxs = []int32{
	2,  // 0: news.RawSource.type:type_name -> news.SourceType
	2,  // 1: news.NormalizedSource.type:type_name -> news.SourceType
	25, // 2: news.RawArticle.published_at:type_name -> google.protobuf.Timestamp
	25, // 3: news.ApiInArticle.published_at:type_name -> google.protobuf.Timestamp
	11, // 4: news.Article.meta:type_name -> news.ArticleMeta
	12, // 5: news.Article.data:type_name -> news.ArticleData
	14, // 6: news.Article.counts:type_name -> news.ArticleCounts
	15, // 7: news.Article.flags:type_name -> news.ArticleFlags
	11, // 8: news.ArticleShort.meta:type_name -> news.ArticleMeta
	13, // 9: news.ArticleShort.data:type_name -> news.ArticleDataShort
	14, // 10: news.ArticleShort.counts:type_name -> news.ArticleCounts
	15, // 11: news.ArticleShort.flags:type_name -> news.ArticleFlags
	25, // 12: news.ArticleMeta.published_at:type_name -> google.protobuf.Timestamp
	2,  // 13: news.Source.type:type_name -> news.SourceType
	19, // 14: news.Category.meta:type_name -> news.CategoryMeta
	20, // 15: news.Category.data:type_name -> news.CategoryData
	18, // 16: news.GetCategories.categories:type_name -> news.Category
	20, // 17: news.GetCategoryI10n.data:type_name -> news.CategoryData
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_news_news_proto_init() }
func file_news_news_proto_init() {
	if File_news_news_proto != nil {
		return
	}
	file_news_news_proto_msgTypes[8].OneofWrappers = []any{}
	file_news_news_proto_msgTypes[14].OneofWrappers = []any{}
	file_news_news_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_news_news_proto_rawDesc), len(file_news_news_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_news_news_proto_goTypes,
		DependencyIndexes: file_news_news_proto_depIdxs,
		EnumInfos:         file_news_news_proto_enumTypes,
		MessageInfos:      file_news_news_proto_msgTypes,
	}.Build()
	File_news_news_proto = out.File
	file_news_news_proto_goTypes = nil
	file_news_news_proto_depIdxs = nil
}
