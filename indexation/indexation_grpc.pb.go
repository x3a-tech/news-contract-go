// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: indexation/indexation.proto

package indexationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Indexation_UpsertArticle_FullMethodName  = "/indexation.Indexation/UpsertArticle"
	Indexation_UpsertArticles_FullMethodName = "/indexation.Indexation/UpsertArticles"
	Indexation_GetArticles_FullMethodName    = "/indexation.Indexation/GetArticles"
)

// IndexationClient is the client API for Indexation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexationClient interface {
	UpsertArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*UpsertArticleResponse, error)
	UpsertArticles(ctx context.Context, in *UpsertArticlesRequest, opts ...grpc.CallOption) (*UpsertArticlesResponse, error)
	GetArticles(ctx context.Context, in *GetArticlesRequest, opts ...grpc.CallOption) (*GetArticlesResponse, error)
}

type indexationClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexationClient(cc grpc.ClientConnInterface) IndexationClient {
	return &indexationClient{cc}
}

func (c *indexationClient) UpsertArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*UpsertArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertArticleResponse)
	err := c.cc.Invoke(ctx, Indexation_UpsertArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexationClient) UpsertArticles(ctx context.Context, in *UpsertArticlesRequest, opts ...grpc.CallOption) (*UpsertArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertArticlesResponse)
	err := c.cc.Invoke(ctx, Indexation_UpsertArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexationClient) GetArticles(ctx context.Context, in *GetArticlesRequest, opts ...grpc.CallOption) (*GetArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticlesResponse)
	err := c.cc.Invoke(ctx, Indexation_GetArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexationServer is the server API for Indexation service.
// All implementations must embed UnimplementedIndexationServer
// for forward compatibility.
type IndexationServer interface {
	UpsertArticle(context.Context, *Article) (*UpsertArticleResponse, error)
	UpsertArticles(context.Context, *UpsertArticlesRequest) (*UpsertArticlesResponse, error)
	GetArticles(context.Context, *GetArticlesRequest) (*GetArticlesResponse, error)
	mustEmbedUnimplementedIndexationServer()
}

// UnimplementedIndexationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndexationServer struct{}

func (UnimplementedIndexationServer) UpsertArticle(context.Context, *Article) (*UpsertArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertArticle not implemented")
}
func (UnimplementedIndexationServer) UpsertArticles(context.Context, *UpsertArticlesRequest) (*UpsertArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertArticles not implemented")
}
func (UnimplementedIndexationServer) GetArticles(context.Context, *GetArticlesRequest) (*GetArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticles not implemented")
}
func (UnimplementedIndexationServer) mustEmbedUnimplementedIndexationServer() {}
func (UnimplementedIndexationServer) testEmbeddedByValue()                    {}

// UnsafeIndexationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexationServer will
// result in compilation errors.
type UnsafeIndexationServer interface {
	mustEmbedUnimplementedIndexationServer()
}

func RegisterIndexationServer(s grpc.ServiceRegistrar, srv IndexationServer) {
	// If the following call pancis, it indicates UnimplementedIndexationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Indexation_ServiceDesc, srv)
}

func _Indexation_UpsertArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexationServer).UpsertArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexation_UpsertArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexationServer).UpsertArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexation_UpsertArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexationServer).UpsertArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexation_UpsertArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexationServer).UpsertArticles(ctx, req.(*UpsertArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexation_GetArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexationServer).GetArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexation_GetArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexationServer).GetArticles(ctx, req.(*GetArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Indexation_ServiceDesc is the grpc.ServiceDesc for Indexation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Indexation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indexation.Indexation",
	HandlerType: (*IndexationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertArticle",
			Handler:    _Indexation_UpsertArticle_Handler,
		},
		{
			MethodName: "UpsertArticles",
			Handler:    _Indexation_UpsertArticles_Handler,
		},
		{
			MethodName: "GetArticles",
			Handler:    _Indexation_GetArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexation/indexation.proto",
}
